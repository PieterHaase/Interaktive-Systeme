[gd_resource type="ShaderMaterial" load_steps=23 format=2]

[ext_resource path="res://materials/walls/Wall_Old_basecolor.png" type="Texture" id=1]
[ext_resource path="res://materials/walls/Wall_Old_roughness.png" type="Texture" id=2]
[ext_resource path="res://materials/walls/Wall_Old_normal.png" type="Texture" id=3]

[sub_resource type="VisualShaderNodeVectorOp" id=5]
output_port_for_preview = 0
operator = 7

[sub_resource type="VisualShaderNodeVectorOp" id=6]
output_port_for_preview = 0
operator = 7

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 5, 2, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=14]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarConstant" id=15]
constant = 0.6

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 9

[sub_resource type="VisualShaderNodeScalarOp" id=17]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=18]
output_port_for_preview = 0
operator = 9

[sub_resource type="VisualShaderNodeVectorOp" id=19]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorOp" id=20]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=21]
default_input_values = [ 0, 0.0, 1, 0.8 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=2]

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 0.33 ]
operator = 9

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=9]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeVectorOp" id=11]
output_port_for_preview = 0
operator = 7

[sub_resource type="VisualShader" id=4]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_6;
uniform sampler2D tex_frg_7;
uniform sampler2D tex_frg_8;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorDecompose:4
	float n_out4p0 = n_out3p0.x;
	float n_out4p1 = n_out3p0.y;
	float n_out4p2 = n_out3p0.z;

// ScalarOp:5
	float n_in5p1 = 0.33000;
	float n_out5p0 = step(n_out4p0, n_in5p1);

// ScalarOp:17
	float n_in17p1 = 0.50000;
	float n_out17p0 = step(n_out4p1, n_in17p1);

// ScalarOp:18
	float n_out18p0 = n_out5p0 + n_out17p0;

// VectorOp:12
	vec3 n_in12p1 = vec3(5.00000, 2.00000, 1.00000);
	vec3 n_out12p0 = n_out3p0 * n_in12p1;

// Texture:6
	vec4 tex_frg_6_read = texture(tex_frg_6, n_out12p0.xy);
	vec3 n_out6p0 = tex_frg_6_read.rgb;
	float n_out6p1 = tex_frg_6_read.a;

// VectorOp:9
	vec3 n_out9p0 = min(vec3(n_out18p0), n_out6p0);

// Scalar:16
	float n_out16p0 = 0.600000;

// ScalarOp:19
	float n_in19p1 = 0.00000;
	float n_out19p0 = step(n_out18p0, n_in19p1);

// VectorOp:21
	vec3 n_out21p0 = vec3(n_out16p0) * vec3(n_out19p0);

// VectorOp:15
	vec3 n_out15p0 = n_out9p0 + n_out21p0;

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out12p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// VectorOp:10
	vec3 n_out10p0 = min(vec3(n_out18p0), n_out7p0);

// ScalarOp:22
	float n_in22p1 = 0.80000;
	float n_out22p0 = n_out19p0 * n_in22p1;

// VectorOp:20
	vec3 n_out20p0 = n_out10p0 + vec3(n_out22p0);

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, n_out12p0.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// VectorOp:11
	vec3 n_out11p0 = min(vec3(n_out18p0), n_out8p0);

// Output:0
	ALBEDO = n_out15p0;
	ROUGHNESS = dot(n_out20p0, vec3(0.333333, 0.333333, 0.333333));
	NORMALMAP = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -844.186, -143.153 )
nodes/fragment/0/position = Vector2( 340, 160 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( -1840, -60 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( -1460, -100 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( -1220, -200 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( -1400, 20 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -1400, 240 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( -1400, 460 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -540, -20 )
nodes/fragment/10/node = SubResource( 5 )
nodes/fragment/10/position = Vector2( -400, 320 )
nodes/fragment/11/node = SubResource( 6 )
nodes/fragment/11/position = Vector2( -400, 600 )
nodes/fragment/12/node = SubResource( 7 )
nodes/fragment/12/position = Vector2( -1640, 120 )
nodes/fragment/15/node = SubResource( 14 )
nodes/fragment/15/position = Vector2( 80, -60 )
nodes/fragment/16/node = SubResource( 15 )
nodes/fragment/16/position = Vector2( -460, -300 )
nodes/fragment/17/node = SubResource( 16 )
nodes/fragment/17/position = Vector2( -1280, -40 )
nodes/fragment/18/node = SubResource( 17 )
nodes/fragment/18/position = Vector2( -1000, -20 )
nodes/fragment/19/node = SubResource( 18 )
nodes/fragment/19/position = Vector2( -740, -320 )
nodes/fragment/20/node = SubResource( 19 )
nodes/fragment/20/position = Vector2( -60, 200 )
nodes/fragment/21/node = SubResource( 20 )
nodes/fragment/21/position = Vector2( -200, -260 )
nodes/fragment/22/node = SubResource( 21 )
nodes/fragment/22/position = Vector2( -252.267, 162.499 )
nodes/fragment/connections = PoolIntArray( 6, 0, 9, 1, 7, 0, 10, 1, 12, 0, 7, 0, 12, 0, 8, 0, 9, 0, 15, 0, 15, 0, 0, 0, 12, 0, 6, 0, 3, 0, 12, 0, 3, 0, 4, 0, 4, 0, 5, 0, 4, 1, 17, 0, 18, 0, 9, 0, 18, 0, 10, 0, 18, 0, 11, 0, 17, 0, 18, 1, 5, 0, 18, 0, 18, 0, 19, 0, 10, 0, 20, 0, 20, 0, 0, 3, 19, 0, 21, 1, 16, 0, 21, 0, 21, 0, 15, 1, 11, 0, 0, 8, 8, 0, 11, 1, 19, 0, 22, 0, 22, 0, 20, 1 )

[resource]
shader = SubResource( 4 )
